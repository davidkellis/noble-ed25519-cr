require "./spec_helper"

PRIVATE_KEY = hexToBytes("a665a45920422f9d417e4867ef")
MESSAGE = Bytes.new([135, 79, 153, 96, 197, 210, 183, 169, 181, 250, 211, 131, 225, 186, 68, 113, 158, 187, 116, 58])
WRONG_MESSAGE = Bytes.new([ 88, 157, 140, 127, 29, 160, 162, 75, 192, 123, 115, 129, 173, 72, 177, 207, 194, 17, 175, 28])

# Caching slows it down 2-3x
def hexToBytes(hex : String) : Bytes
  raise Error.new("hexToBytes: received invalid unpadded hex") unless hex.size % 2 == 0
  array = Bytes.new(hex.length / 2)
  i = 0
  while i < array.length   # for (i = 0 i < array.length i++)
    j = i * 2
    hexByte = hex.slice(j, j + 2)
    byte = Number.parseInt(hexByte, 16)
    array[i] = byte
    i += 1
  end
  return array
end

describe Noble::Ed25519 do
  before_each do
    Noble::Ed25519::Utils.precompute(8)
  end

  it "works" do
    invalidPriv = BigInt.new
    expect_raises(Exception) do
      Noble::Ed25519.getPublicKey(invalidPriv)
    end
  end
end
